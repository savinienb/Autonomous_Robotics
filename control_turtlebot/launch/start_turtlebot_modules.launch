<launch>
	<arg name="enable_turtlebot_simulation" value="true"/>
	<arg name="enable_keyboard_teleoperation" value="false"/>
	<arg name="enable_rviz" value="true"/>
	<arg name="enable_octomap" value="true"/>
	<arg name="enable_controller" value="true"/>

	<arg name="enable_planner" value="true"/>



    	<group if="$(arg enable_turtlebot_simulation)">
		<include file="$(find turtlebot_gazebo)/launch/turtlebot_world.launch">  <!-- other ROS distributions -->
	    	<!--include file="$(find turtlebot_gazebo)/launch/turtlebot_playground.launch"/-->  <!-- ROS hydro -->

	    	<!-- more default parameters can be changed here -->
            	<arg name="world_file" value="worlds/willowgarage.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
            	<arg name="gui" default="false"/>
		
		

            	</include>

		
		<group if="$(arg enable_rviz)">
			<include file="$(find control_turtlebot)/launch/view_robot.launch"/>
		</group>
    	</group>

    	<group unless="$(arg enable_turtlebot_simulation)">
		<include file="$(find turtlebot_bringup)/launch/minimal.launch"/>
		<include file="$(find turtlebot_bringup)/launch/3dsensor.launch"/>
    	</group>

    	<group if="$(arg enable_keyboard_teleoperation)">
    		<include file="$(find turtlebot_teleop)/launch/keyboard_teleop.launch">
    		</include>
    	</group>

	<group if="$(arg enable_octomap)">
    		<node pkg="octomap_server" type="octomap_server_node" name="octomap_server" args=" " cwd="node" output="screen">
    		<param name="frame_id"            	  value="/odom" />
    		<remap from="/cloud_in" to="/pc_from_scan" /> <!-- simulator -->
    		<param name="resolution"            	  value="0.05" />
    		<param name="latch"            	  value="False" />
    		<!--remap from="/cloud_in" to="/camera/depth_registered/points" /--> <!-- real turtlebot -->
		</node>
    	</group>
    
    
	<node pkg="control_turtlebot" type="laserscan_to_pointcloud" name="laserscan_to_pointcloud" respawn="true" output="screen" />
    
    	<group if="$(arg enable_controller)">
    		<node pkg="control_turtlebot" type="controller_turtlebot.py" name="control_turtlebot" respawn="true" output="screen" />
    	</group>

    	<group if="$(arg enable_planner)">
	    <!-- Offline planner ompl -->
		<rosparam command="load" file="$(find control_turtlebot)/launch/config/planner_parameters.yaml" />
		<node pkg="control_turtlebot" type="tutorial_offline_planner_R2" name="tutorial_offline_planner_R2" output="screen" />
	</group>
</launch>
